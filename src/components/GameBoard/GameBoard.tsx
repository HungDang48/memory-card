"use client";

import React, { useEffect, useState } from 'react';
import './gameBoard.css';
import Card from '../card/Card';
import confetti from 'canvas-confetti';

const emojiList = ['üçï','üéÆ','üöÄ','üéß','üìö','üç©','üßÉ','üé≤','üê±','üê∂'];

const shuffleArray = (array: string[]) => {
  return [...array, ...array]
    .sort(() => Math.random() - 0.5)
    .map((item, index) => ({
      id: index,
      emoji: item,
      isFlipped: false,
      isMatched: false,
    }));
};

type CardType = {
  id: number;
  emoji: string;
  isFlipped: boolean;
  isMatched: boolean;
};

const GameBoard = () => {
  const [cards, setCards] = useState<CardType[]>([]);
  const [flippedIndices, setFlippedIndices] = useState<number[]>([]);
  const [level, setLevel] = useState<number>(1);
  const [time, setTime] = useState<number>(60); // Th·ªùi gian ban ƒë·∫ßu l√† 60 gi√¢y
  const [isActive, setIsActive] = useState<boolean>(false);

  // H√†m sinh emoji theo level
  const generateLevelEmoji = (lvl: number) => {
    return emojiList.slice(0, lvl * 3);
  };

  // Reset game sau khi thay ƒë·ªïi c·∫•p ƒë·ªô ho·∫∑c game k·∫øt th√∫c
  useEffect(() => {
    const newEmojis = generateLevelEmoji(level);
    setCards(shuffleArray(newEmojis));
    setFlippedIndices([]);
    setTime(60 + level * 5); // TƒÉng th√™m 5 gi√¢y cho m·ªói level
    setIsActive(true); // B·∫Øt ƒë·∫ßu l·∫°i th·ªùi gian
  }, [level]);

  // H√†m x·ª≠ l√Ω ƒë·∫øm ng∆∞·ª£c th·ªùi gian v√† ki·ªÉm tra khi h·∫øt gi·ªù
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isActive && time > 0) {
      interval = setInterval(() => {
        setTime((prev) => prev - 1);
      }, 1000);
    } else if (time === 0) {
      setIsActive(false);
      alert("H·∫øt gi·ªù! Quay l·∫°i Level 1.");
      setLevel(1); // Reset level v·ªÅ 1
      setTime(60); // ƒê·∫∑t l·∫°i th·ªùi gian
      setCards([]); // Reset cards
      setFlippedIndices([]); // Reset flipped indices
    }
    return () => clearInterval(interval);
  }, [isActive, time]);

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i nh·∫•p v√†o th·∫ª
  const handleCardClick = (index: number) => {
    if (cards[index].isFlipped || cards[index].isMatched || flippedIndices.length === 2) {
      return;
    }

    const newCards = [...cards];
    newCards[index].isFlipped = true;
    const newFlipped = [...flippedIndices, index];
    setCards(newCards);
    setFlippedIndices(newFlipped);

    if (newFlipped.length === 2) {
      const [firstIndex, secondIndex] = newFlipped;
      const firstCard = newCards[firstIndex];
      const secondCard = newCards[secondIndex];

      if (firstCard.emoji === secondCard.emoji) {
        setTimeout(() => {
          const updatedCards = [...newCards];
          updatedCards[firstIndex].isMatched = true;
          updatedCards[secondIndex].isMatched = true;
          setCards(updatedCards);
          setFlippedIndices([]);
        }, 500);
      } else {
        setTimeout(() => {
          const updatedCards = [...newCards];
          updatedCards[firstIndex].isFlipped = false;
          updatedCards[secondIndex].isFlipped = false;
          setCards(updatedCards);
          setFlippedIndices([]);
        }, 1000);
      }
    }
  };

  // Ki·ªÉm tra khi ho√†n th√†nh level
  useEffect(() => {
    if (cards.length > 0 && cards.every((card) => card.isMatched)) {
      setIsActive(false);

      // üéâ G·ªçi hi·ªáu ·ª©ng confetti m·∫°nh h∆°n v√† k√©o d√†i th·ªùi gian
      const duration = 3000;
      const animationEnd = Date.now() + duration;

      const interval = setInterval(() => {
        const timeLeft = animationEnd - Date.now();

        if (timeLeft <= 0) {
          clearInterval(interval);
          return;
        }

        confetti({
          particleCount: 200,
          startVelocity: 30,
          spread: 360,
          ticks: 60,
          origin: {
            x: Math.random(),
            y: Math.random() - 0.2
          }
        });
      }, 250);

      setTimeout(() => {
        if (confirm(`Level ${level} complete with ${60 - time} seconds used! Next level?`)) {
          setLevel(level + 1);
        }
      }, duration + 500);
    }
  }, [cards]);

  return (
    <div className="game-container">
      {/* Video n·ªÅn */}
      <div className="video-background">
        <video autoPlay loop muted>
          <source src="/video/background1.mp4" type="video/mp4" />
          Your browser does not support the video tag.
        </video>
        <div className="video-overlay"></div> {/* L·ªõp ph·ªß */}
      </div>

      <div className="status-bar">
        <span>Level {level}</span>
        <span>Time left: {time}s</span>
      </div>
      <div className="card-grid">
        {cards.map((card, index) => (
          <Card
            key={card.id}
            emoji={card.emoji}
            isFlipped={card.isFlipped}
            isMatched={card.isMatched}
            onClick={() => handleCardClick(index)}
          />
        ))}
      </div>
    </div>
  );
};

export default GameBoard;
